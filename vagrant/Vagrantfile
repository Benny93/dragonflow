# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'

vagrant_config = YAML.load_file("provisioning/virtualbox.conf.yml")

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
    # The most common configuration options are documented and commented below.
    # For a complete reference, please see the online documentation at
    # https://docs.vagrantup.com.

    # Every Vagrant development environment requires a box. You can search for
    # boxes at https://atlas.hashicorp.com/search.
    config.vm.box = vagrant_config['box']
#    config.vm.box_version = '20170512.0.0'

    if Vagrant.has_plugin?("vagrant-cachier")
        # Configure cached packages to be shared between instances of the same base box.
        # More info on http://fgrehm.viewdocs.io/vagrant-cachier/usage
        config.cache.scope = :box
    end

    config.vm.synced_folder '..', '/home/vagrant/dragonflow'
    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    # config.vm.box_check_update = false

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # NOTE: This will enable public access to the opened port
    # config.vm.network "forwarded_port", guest: 80, host: 8080

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine and only allow access
    # via 127.0.0.1 to disable public access
    # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    # config.vm.network "private_network", ip: "192.168.33.10"

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network "public_network"

    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    # config.vm.synced_folder "../data", "/vagrant_data"

    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    # config.vm.provider "virtualbox" do |vb|
    #   # Display the VirtualBox GUI when booting the machine
    #   vb.gui = true
    #
    #   # Customize the amount of memory on the VM:
    #   vb.memory = "1024"
    # end
    #
    # View the documentation for the provider you are using for more
    # information on available options.

    # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
    # such as FTP and Heroku are also available. See the documentation at
    # https://docs.vagrantup.com/v2/push/atlas.html for more information.
    # config.push.define "atlas" do |push|
    #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
    # end

    # Enable provisioning with a shell script. Additional provisioners such as
    # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
    # documentation for more information about their specific syntax and use.
    # config.vm.provision "shell", inline: <<-SHELL
    #   apt-get update
    #   apt-get install -y apache2
    # SHELL

    # ACTUAL START OF FILE
    # Bring up the Devstack controller node on Virtualbox
    # TODO: loop over controllers
    # (1..3).each do |i|
    #   config.vm.define "node-#{i}" do |node|
    #       node.vm.provision "shell",
    #             inline: "echo hello from node #{i}"
    #               end
    #               end

    config.vm.define "controller" do |controller|
        controller.vm.host_name = vagrant_config['controller']['host_name']
        controller.vm.network "private_network",
            ip: vagrant_config['controller']['ip'],
            netmask: vagrant_config['controller']['netmask']
        controller.vm.provision "shell", path: "provisioning/setup-base.sh", privileged: true
        config.vm.provision "file", source: "provisioning/.zshrc", destination: ".zshrc"
        config.vm.provision "file", source: "provisioning/fix_encoding.py", destination: "/home/vagrant/fix_encoding.py"
        controller.vm.provision "shell", path: "provisioning/setup-controller.sh", privileged: false
#        controller.vm.provision "shell", path: "provisioning/setup-controller-net.sh", privileged: true, run: 'always'
        # install docker. Reuse script to launch replikas
        controller.vm.provision "shell", path: "provisioning/install_redis_replica.sh", privileged: true
        # only virtualbox support
        config.vm.provider "virtualbox" do |vb|
            vb.memory = vagrant_config['controller']['memory']
            vb.cpus = vagrant_config['controller']['cpus']
        end
    end
    config.vm.define "controller1" do |controller1|
        controller1.vm.host_name = vagrant_config['controller1']['host_name']
        controller1.vm.network "private_network",
            ip: vagrant_config['controller1']['ip'],
            netmask: vagrant_config['controller1']['netmask']
        controller1.vm.provision "shell", path: "provisioning/setup-base.sh", privileged: true
        config.vm.provision "file", source: "provisioning/.zshrc", destination: ".zshrc"
        config.vm.provision "file", source: "provisioning/fix_encoding.py", destination: "/home/vagrant/fix_encoding.py"
        controller1.vm.provision "shell", path: "provisioning/setup-controller.sh", privileged: false
#        controller1.vm.provision "shell", path: "provisioning/setup-controller-net.sh", privileged: true, run: 'always'
        # install docker. Reuse script to launch replikas
        controller1.vm.provision "shell", path: "provisioning/install_redis_replica.sh", privileged: true
        # only virtualbox support
        config.vm.provider "virtualbox" do |vb|
            vb.memory = vagrant_config['controller1']['memory']
            vb.cpus = vagrant_config['controller1']['cpus']
        end
    end

    config.vm.define "router" do |router|
#        router.vm.box='ubuntu/xenial64'
        router.vm.host_name = vagrant_config['router']['host_name']
        router.vm.network "private_network",
            ip: vagrant_config['router']['ip1'],
            netmask: vagrant_config['router']['netmask']
        router.vm.network "private_network",
            ip: vagrant_config['router']['ip2'],
            netmask: vagrant_config['router']['netmask']
        router.vm.network "private_network",
            ip: vagrant_config['router']['ip3'],
            netmask: vagrant_config['router']['netmask']
        router.vm.provision "shell", path: "provisioning/setup-base.sh", privileged: true
        config.vm.provision "file", source: "provisioning/.zshrc", destination: ".zshrc"
        router.vm.provision "shell", path: "provisioning/setup-router.sh", privileged: true
        router.vm.provision "shell", path: "provisioning/setup-router-net.sh", privileged: true, run: 'always'
        # only virtualbox support
        config.vm.provider "virtualbox" do |vb|
            vb.memory = vagrant_config['router']['memory']
            vb.cpus = vagrant_config['router']['cpus']
        end
    end

    config.vm.define "switch1" do |switch1|
        switch1.vm.host_name = vagrant_config['switch1']['host_name']
        switch1.vm.network "private_network",
            ip: vagrant_config['switch1']['ip'],
            netmask: vagrant_config['switch1']['netmask']
        switch1.vm.provision "shell", path: "provisioning/setup-base.sh", privileged: true
        config.vm.provision "file", source: "provisioning/.zshrc", destination: ".zshrc"
       # switch1.vm.provision "shell", path: "provisioning/setup-switch-net.sh", privileged: true, run: 'always'
        # only virtualbox support 
        config.vm.provider "virtualbox" do |vb|
            vb.memory = vagrant_config['switch1']['memory']
            vb.cpus = vagrant_config['switch1']['cpus']
        end
    end

end
